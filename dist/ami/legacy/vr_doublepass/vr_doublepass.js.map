{"version":3,"sources":["../../../../ami/legacy/vr_doublepass/vr_doublepass.js"],"names":["glslify","require","controls","threeD","renderer","stats","camera","sceneRTT","sceneScreen","uniformsSecondPass","rtTexture","lut","ready","myStack","opacity","steps","alphaCorrection","frequence","amplitude","onMouseDown","uSteps","value","Math","floor","onMouseUp","onWindowResize","aspect","offsetWidth","offsetHeight","updateProjectionMatrix","setSize","buildGUI","gui","dat","GUI","autoPlace","customContainer","document","getElementById","appendChild","domElement","stackFolder","addFolder","lutUpdate","add","lutsAvailable","onChange","uTextureLUT","dispose","texture","opacityUpdate","lutO","stepsUpdate","step","alphaCorrrectionUpdate","uAlphaCorrection","frequenceUpdate","uFrequence","amplitudeUpdate","uAmplitude","open","init","animate","update","render","requestAnimationFrame","THREE","WebGLRenderer","alpha","Stats","PerspectiveCamera","position","x","y","z","up","set","rotateSpeed","zoomSpeed","panSpeed","staticMoving","dynamicDampingFactor","addEventListener","window","onload","t2","files","map","v","loader","seriesContainer","loadSequence","forEach","url","push","Promise","resolve","then","fetch","data","parse","series","catch","error","console","log","all","free","mergeSeries","stack","prepare","pack","boxGeometry","BoxGeometry","dimensionsIJK","offset","Vector3","applyMatrix","Matrix4","makeTranslation","halfDimensionsIJK","textures","m","_rawData","length","tex","DataTexture","rawData","textureSize","textureType","UnsignedByteType","UVMapping","ClampToEdgeWrapping","NearestFilter","needsUpdate","flipY","uniformsFirstPass","firstPassUniforms","uWorldBBox","worldBoundingBox","materialFirstPass","ShaderMaterial","uniforms","vertexShader","fragmentShader","side","BackSide","boxMeshFirstPass","Mesh","_ijk2LPS","Scene","WebGLRenderTarget","innerWidth","innerHeight","minFilter","LinearFilter","magFilter","format","RGBFormat","secondPassUniforms","uTextureSize","uTextureContainer","uWorldToData","lps2IJK","uNumberOfChannels","numberOfChannels","uBitsAllocated","bitsAllocated","uPackedPerPixel","packedPerPixel","uWindowCenterWidth","windowCenter","windowWidth","uRescaleSlopeIntercept","rescaleSlope","rescaleIntercept","uTextureBack","uDataDimensions","luts","presetLuts","lutsO","presetLutsO","uLut","materialSecondPass","FrontSide","transparent","boxMeshSecondPass","centerLPS","worldCenter","lookAt","target","screenshotElt","screenshot","toDataURL","download","Date","now","href"],"mappings":"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","file":"vr_doublepass.js","sourcesContent":["/* globals Stats, dat*/\r\n\r\nimport ControlsTrackball from '../../src/controls/controls.trackball';\r\nimport HelpersLut        from '../../src/helpers/helpers.lut';\r\nimport LoadersVolume     from '../../src/loaders/loaders.volume';\r\nimport ShadersRaycasting from '../../src/shaders/shaders.raycasting';\r\n\r\nlet glslify = require('glslify');\r\n\r\n// standard global letiables\r\nlet controls, threeD, renderer, stats, camera, sceneRTT, sceneScreen, uniformsSecondPass;\r\nlet rtTexture;\r\nlet lut;\r\nlet ready = false;\r\n\r\nlet myStack = {\r\n  lut: 'walking_dead',\r\n  opacity: 'linear',\r\n  steps: 256,\r\n  alphaCorrection: 0.5,\r\n  frequence: 0,\r\n  amplitude: 0\r\n};\r\n\r\nfunction onMouseDown() {\r\n  if (uniformsSecondPass) {\r\n    uniformsSecondPass.uSteps.value = Math.floor(myStack.steps / 2);\r\n  }\r\n}\r\n\r\nfunction onMouseUp() {\r\n  if (uniformsSecondPass) {\r\n    uniformsSecondPass.uSteps.value = myStack.steps;\r\n  }\r\n}\r\n\r\nfunction onWindowResize() {\r\n  // update the camera\r\n  camera.aspect = threeD.offsetWidth / threeD.offsetHeight;\r\n  camera.updateProjectionMatrix();\r\n\r\n  // notify the renderer of the size change\r\n  renderer.setSize(threeD.offsetWidth, threeD.offsetHeight);\r\n}\r\n\r\nfunction buildGUI() {\r\n  let gui = new dat.GUI({\r\n            autoPlace: false\r\n          });\r\n\r\n  let customContainer = document.getElementById('my-gui-container');\r\n  customContainer.appendChild(gui.domElement);\r\n\r\n  let stackFolder = gui.addFolder('Settings');\r\n  let lutUpdate = stackFolder.add(myStack, 'lut', lut.lutsAvailable());\r\n  lutUpdate.onChange(function(value) {\r\n      lut.lut = value;\r\n      uniformsSecondPass.uTextureLUT.value.dispose();\r\n      uniformsSecondPass.uTextureLUT.value = lut.texture;\r\n    });\r\n  // init LUT\r\n  lut.lut = myStack.lut;\r\n  uniformsSecondPass.uTextureLUT.value.dispose();\r\n  uniformsSecondPass.uTextureLUT.value = lut.texture;\r\n\r\n  let opacityUpdate = stackFolder.add(myStack, 'opacity', lut.lutsAvailable('opacity'));\r\n  opacityUpdate.onChange(function(value) {\r\n      lut.lutO = value;\r\n      uniformsSecondPass.uTextureLUT.value.dispose();\r\n      uniformsSecondPass.uTextureLUT.value = lut.texture;\r\n    });\r\n\r\n  let stepsUpdate = stackFolder.add(myStack, 'steps', 0, 512).step(1);\r\n  stepsUpdate.onChange(function(value) {\r\n      if (uniformsSecondPass) {\r\n        uniformsSecondPass.uSteps.value = value;\r\n      }\r\n    });\r\n\r\n  let alphaCorrrectionUpdate = stackFolder.add(myStack, 'alphaCorrection', 0, 1).step(0.01);\r\n  alphaCorrrectionUpdate.onChange(function(value) {\r\n      if (uniformsSecondPass) {\r\n        uniformsSecondPass.uAlphaCorrection.value = value;\r\n      }\r\n    });\r\n\r\n  let frequenceUpdate = stackFolder.add(myStack, 'frequence', 0, 1).step(0.01);\r\n  frequenceUpdate.onChange(function(value) {\r\n      if (uniformsSecondPass) {\r\n        uniformsSecondPass.uFrequence.value = value;\r\n      }\r\n    });\r\n\r\n  let amplitudeUpdate = stackFolder.add(myStack, 'amplitude', 0, 0.5).step(0.01);\r\n  amplitudeUpdate.onChange(function(value) {\r\n      if (uniformsSecondPass) {\r\n        uniformsSecondPass.uAmplitude.value = value;\r\n      }\r\n    });\r\n\r\n  stackFolder.open();\r\n}\r\n\r\nfunction init() {\r\n\r\n  // this function is executed on each animation frame\r\n  function animate() {\r\n    // render\r\n    controls.update();\r\n\r\n    if (ready) {\r\n      renderer.render(sceneRTT, camera, rtTexture, true);\r\n      renderer.render(sceneScreen, camera);\r\n    }\r\n\r\n    stats.update();\r\n\r\n    // request new frame\r\n    requestAnimationFrame(function() {\r\n      animate();\r\n    });\r\n  }\r\n\r\n  // renderer\r\n  threeD = document.getElementById('r3d');\r\n  renderer = new THREE.WebGLRenderer({\r\n    alpha: true\r\n  });\r\n  renderer.setSize(threeD.offsetWidth, threeD.offsetHeight);\r\n  threeD.appendChild(renderer.domElement);\r\n\r\n  // stats\r\n  stats = new Stats();\r\n  threeD.appendChild(stats.domElement);\r\n\r\n  // camera\r\n  camera = new THREE.PerspectiveCamera(45, threeD.offsetWidth / threeD.offsetHeight, 0.1, 100000);\r\n  camera.position.x = 166;\r\n  camera.position.y = -471;\r\n  camera.position.z = 153;\r\n  camera.up.set(-0.42, 0.86, 0.26);\r\n\r\n  // controls\r\n  controls = new ControlsTrackball(camera, threeD);\r\n  controls.rotateSpeed = 5.5;\r\n  controls.zoomSpeed = 1.2;\r\n  controls.panSpeed = 0.8;\r\n  controls.staticMoving = true;\r\n  controls.dynamicDampingFactor = 0.3;\r\n\r\n  threeD.addEventListener('mousedown', onMouseDown, false);\r\n  threeD.addEventListener('mouseup', onMouseUp, false);\r\n  window.addEventListener('resize', onWindowResize, false);\r\n\r\n  // start rendering loop\r\n  animate();\r\n}\r\n\r\nwindow.onload = function() {\r\n\r\n  // init threeJS\r\n  init();\r\n\r\n  let t2 = [\r\n    '36444280', '36444294', '36444308', '36444322', '36444336',\r\n    '36444350', '36444364', '36444378', '36444392', '36444406',\r\n    '36444420', '36444434', '36444448', '36444462', '36444476',\r\n    '36444490', '36444504', '36444518', '36444532', '36746856',\r\n    '36746870', '36746884', '36746898', '36746912', '36746926',\r\n    '36746940', '36746954', '36746968', '36746982', '36746996',\r\n    '36747010', '36747024', '36748200', '36748214', '36748228',\r\n    '36748270', '36748284', '36748298', '36748312', '36748326',\r\n    '36748340', '36748354', '36748368', '36748382', '36748396',\r\n    '36748410', '36748424', '36748438', '36748452', '36748466',\r\n    '36748480', '36748494', '36748508', '36748522', '36748242',\r\n    '36748256'\r\n  ];\r\n\r\n  let files = t2.map(function(v) {\r\n    return 'https://cdn.rawgit.com/FNNDSC/data/master/dicom/adi_brain/' + v;\r\n  });\r\n\r\n  //   let data = [\r\n  //  'scan-00109_rec-01a.nii_.gz'\r\n  //   // '7002_t1_average_BRAINSABC.nii.gz'\r\n  // ];\r\n\r\n  // let files = data.map(function(v) {\r\n  //   return '../../data/nii/' + v;\r\n  // });\r\n\r\n  // load sequence for each file\r\n  // instantiate the loader\r\n  // it loads and parses the dicom image\r\n  // hookup a progress bar....\r\n  let loader = new LoadersVolume(threeD);\r\n  let seriesContainer = [];\r\n  let loadSequence = [];\r\n  files.forEach((url) => {\r\n    loadSequence.push(\r\n      Promise.resolve()\r\n      // fetch the file\r\n      .then(() => loader.fetch(url))\r\n      .then((data) => loader.parse(data))\r\n      .then((series) => {\r\n        seriesContainer.push(series);\r\n      })\r\n      .catch(function(error) {\r\n        window.console.log('oops... something went wrong...');\r\n        window.console.log(error);\r\n      })\r\n    );\r\n  });\r\n\r\n  // load sequence for all files\r\n  Promise\r\n  .all(loadSequence)\r\n  .then(() => {\r\n    loader.free();\r\n    loader = null;\r\n\r\n    let series = seriesContainer[0].mergeSeries(seriesContainer)[0];\r\n    // get first stack from series\r\n    let stack = series.stack[0];\r\n    // prepare and pack it\r\n    stack.prepare();\r\n    stack.pack();\r\n\r\n    // box is centered on 0,0,0\r\n    // we want first voxel of the box to be centered on 0,0,0\r\n    // in IJK space\r\n    let boxGeometry = new THREE.BoxGeometry(\r\n      stack.dimensionsIJK.x - 1,\r\n      stack.dimensionsIJK.y - 1,\r\n      stack.dimensionsIJK.z - 1\r\n      );\r\n\r\n    // box is centered on 0,0,0\r\n    // we want first voxel of the box to be centered on 0,0,0\r\n    // in IJK space\r\n    let offset = new THREE.Vector3(-0.5, -0.5, -0.5);\r\n    boxGeometry.applyMatrix(new THREE.Matrix4().makeTranslation(\r\n      stack.halfDimensionsIJK.x + offset.x,\r\n      stack.halfDimensionsIJK.y + offset.y,\r\n      stack.halfDimensionsIJK.z + offset.z)\r\n    );\r\n\r\n    // slice material\r\n    let textures = [];\r\n    for (let m = 0; m < stack._rawData.length; m++) {\r\n      let tex = new THREE.DataTexture(\r\n        stack.rawData[m],\r\n        stack.textureSize,\r\n        stack.textureSize,\r\n        stack.textureType,\r\n        THREE.UnsignedByteType,\r\n        THREE.UVMapping,\r\n        THREE.ClampToEdgeWrapping,\r\n        THREE.ClampToEdgeWrapping,\r\n        THREE.NearestFilter,\r\n        THREE.NearestFilter);\r\n      tex.needsUpdate = true;\r\n      tex.flipY = true;\r\n      textures.push(tex);\r\n    }\r\n\r\n    // Create first pass mesh, scene, and textyre to be rendered to\r\n    //\r\n\r\n    // material\r\n    let uniformsFirstPass = ShadersRaycasting.firstPassUniforms();\r\n    uniformsFirstPass.uWorldBBox.value = stack.worldBoundingBox();\r\n    let materialFirstPass = new THREE.ShaderMaterial({\r\n          uniforms: uniformsFirstPass,\r\n          vertexShader: glslify('../../src/shaders/shaders.data.vert'),\r\n          fragmentShader: glslify('../../src/shaders/shaders.raycasting.firstPass.frag'),\r\n          side: THREE.BackSide\r\n        });\r\n\r\n    // mesh\r\n    let boxMeshFirstPass = new THREE.Mesh(boxGeometry, materialFirstPass);\r\n    // go the LPS space\r\n    boxMeshFirstPass.applyMatrix(stack._ijk2LPS);\r\n\r\n    // scene\r\n    sceneRTT = new THREE.Scene();\r\n    sceneRTT.add(boxMeshFirstPass);\r\n\r\n    // target texture\r\n    rtTexture = new THREE.WebGLRenderTarget(window.innerWidth,\r\n                                             window.innerHeight,\r\n                                             {minFilter: THREE.LinearFilter,\r\n                                               magFilter: THREE.NearestFilter,\r\n                                               format: THREE.RGBFormat\r\n                                             });\r\n\r\n    // Create second pass mesh and scene\r\n    //\r\n\r\n    // material\r\n    uniformsSecondPass = ShadersRaycasting.secondPassUniforms();\r\n    uniformsSecondPass.uTextureSize.value = stack.textureSize;\r\n    uniformsSecondPass.uTextureContainer.value = textures;\r\n    uniformsSecondPass.uWorldToData.value = stack.lps2IJK;\r\n    uniformsSecondPass.uNumberOfChannels.value = stack.numberOfChannels;\r\n    uniformsSecondPass.uBitsAllocated.value = stack.bitsAllocated;\r\n    uniformsSecondPass.uPackedPerPixel.value = stack.packedPerPixel;\r\n    uniformsSecondPass.uWindowCenterWidth.value = [stack.windowCenter, stack.windowWidth * 0.8];\r\n    uniformsSecondPass.uRescaleSlopeIntercept.value = [stack.rescaleSlope, stack.rescaleIntercept];\r\n    uniformsSecondPass.uTextureBack.value = rtTexture;\r\n    uniformsSecondPass.uWorldBBox.value = stack.worldBoundingBox();\r\n    uniformsSecondPass.uDataDimensions.value = [stack.dimensionsIJK.x,\r\n                                                stack.dimensionsIJK.y,\r\n                                                stack.dimensionsIJK.z];\r\n    uniformsSecondPass.uSteps.value = myStack.steps;\r\n\r\n    // CREATE LUT\r\n    lut = new HelpersLut('my-lut-canvases');\r\n    lut.luts = HelpersLut.presetLuts();\r\n    lut.lutsO = HelpersLut.presetLutsO();\r\n\r\n    uniformsSecondPass.uTextureLUT.value = lut.texture;\r\n    uniformsSecondPass.uLut.value = 1;\r\n    uniformsSecondPass.uAlphaCorrection.value = myStack.alphaCorrection;\r\n\r\n    let materialSecondPass = new THREE.ShaderMaterial({\r\n      uniforms: uniformsSecondPass,\r\n      vertexShader: glslify('../../src/shaders/shaders.raycasting.secondPass.vert'),\r\n      fragmentShader: glslify('../../src/shaders/shaders.raycasting.secondPass.frag'),\r\n      side: THREE.FrontSide,\r\n      transparent: true\r\n    });\r\n\r\n    // mesh\r\n    let boxMeshSecondPass = new THREE.Mesh(boxGeometry, materialSecondPass);\r\n    // go the LPS space\r\n    boxMeshSecondPass.applyMatrix(stack._ijk2LPS);\r\n\r\n    // scene\r\n    sceneScreen = new THREE.Scene();\r\n    sceneScreen.add(boxMeshSecondPass);\r\n\r\n    // update camrea's and interactor's target\r\n    let centerLPS = stack.worldCenter();\r\n    camera.lookAt(centerLPS.x, centerLPS.y, centerLPS.z);\r\n    camera.updateProjectionMatrix();\r\n    controls.target.set(centerLPS.x, centerLPS.y, centerLPS.z);\r\n\r\n    buildGUI();\r\n\r\n    let screenshotElt = document.getElementById('screenshot');\r\n    screenshotElt.addEventListener('click', function() {\r\n      controls.update();\r\n\r\n      if (ready) {\r\n        renderer.render(sceneRTT, camera, rtTexture, true);\r\n        renderer.render(sceneScreen, camera);\r\n      }\r\n\r\n      let screenshot = renderer.domElement.toDataURL();\r\n      screenshotElt.download = 'VJS-' + Date.now() + '.png';\r\n      screenshotElt.href = screenshot;\r\n    });\r\n\r\n    // good to go\r\n    ready = true;\r\n  })\r\n  .catch((error) => window.console.log(error));\r\n\r\n};\r\n"]}