{"version":3,"sources":["../../../../ami/specs/loaders/loaders.volume.spec.js"],"names":["describe","loader","eventsHandleSpy","sourceUrl","baseSinonMatch","sinon","match","file","and","hasOwn","beforeEach","map","evtName","spy","on","afterEach","it","done","load","then","data","expect","Array","isArray","toBe","length","assert","calledWith","urls"],"mappings":";;AAEA;;;;;;AAEAA,SAAS,eAAT,EAA0B,YAAW;AACnC,MAAIC,eAAJ;AACA,MAAMC,kBAAkB,EAAxB;AACA,MAAMC,YAAY,gCAAlB;AACA,MAAMC,iBAAiB,IAAIC,MAAMC,KAAV,CAAgB,EAACC,MAAMJ,SAAP,EAAhB,EAAmCK,GAAnC,CAAuC,IAAIH,MAAMC,KAAN,CAAYG,MAAhB,CAAuB,MAAvB,CAAvC,CAAvB;;AAEAC,aAAW,YAAM;AACfT,aAAS,uBAAT;AACA;AACA,KAAC,YAAD,EACE,aADF,EAEE,eAFF,EAGE,aAHF,EAIE,aAJF,EAKE,eALF,EAME,gBANF,EAOE,WAPF,EAQE,aARF,EASE,SATF,EAUE,eAVF,EAWE,aAXF,EAWiBU,GAXjB,CAWqB,UAACC,OAAD,EAAa;AAC9BV,sBAAgBU,OAAhB,IAA2B,IAAIP,MAAMQ,GAAV,EAA3B;AACAZ,aAAOa,EAAP,CAAUF,OAAV,EAAmBV,gBAAgBU,OAAhB,CAAnB;AACD,KAdH;AAeD,GAlBD;;AAoBAG,YAAU,YAAM;AACdd,aAAS,IAAT;AACD,GAFD;;AAIAD,WAAS,YAAT,EAAuB,YAAM;AAC3BgB,OAAG,mBAAH,EAAwB,UAACC,IAAD,EAAU;AAChChB,aAAOiB,IAAP,CAAYf,SAAZ,EACWgB,IADX,CACgB,UAACC,IAAD,EAAU;AACdC,eAAOC,MAAMC,OAAN,CAAcH,IAAd,CAAP,EAA4BI,IAA5B,CAAiC,IAAjC;AACAH,eAAOD,KAAKK,MAAZ,EAAoBD,IAApB,CAAyB,CAAzB;AACA;AACAnB,cAAMqB,MAAN,CAAaC,UAAb,CAAwBzB,gBAAgB,aAAhB,CAAxB,EAAwDE,cAAxD;AACAC,cAAMqB,MAAN,CAAaC,UAAb,CAAwBzB,gBAAgB,SAAhB,CAAxB,EAAoDE,eACGI,GADH,CACO,IAAIH,MAAMC,KAAN,CAAYG,MAAhB,CAAuB,OAAvB,CADP,EAEGD,GAFH,CAEO,IAAIH,MAAMC,KAAN,CAAYG,MAAhB,CAAuB,QAAvB,CAFP,CAApD;AAGAJ,cAAMqB,MAAN,CAAaC,UAAb,CAAwBzB,gBAAgB,eAAhB,CAAxB,EAA0DE,eACHI,GADG,CACC,IAAIH,MAAMC,KAAN,CAAYG,MAAhB,CAAuB,OAAvB,CADD,EAEHD,GAFG,CAEC,IAAIH,MAAMC,KAAN,CAAYG,MAAhB,CAAuB,QAAvB,CAFD,CAA1D;AAGAQ;AACD,OAbX;AAcD,KAfD;;AAiBAD,OAAG,sBAAH,EAA2B,UAACC,IAAD,EAAU;AACnC,UAAMW,OAAO,CACX,gCADW,EAEX,gCAFW,CAAb;AAIA3B,aAAOiB,IAAP,CAAYU,IAAZ,EACWT,IADX,CACgB,UAACC,IAAD,EAAU;AACdC,eAAOC,MAAMC,OAAN,CAAcH,IAAd,CAAP,EAA4BI,IAA5B,CAAiC,IAAjC;AACAH,eAAOD,KAAKK,MAAZ,EAAoBD,IAApB,CAAyB,CAAzB;AACAP;AACD,OALX;AAMD,KAXD;AAYD,GA9BD;AA+BD,CA7DD,E,CAJA","file":"loaders.volume.spec.js","sourcesContent":["/* globals describe, fdescribe, it, fit, expect, beforeEach*/\r\n\r\nimport VolumeLoader from '../../src/loaders/loaders.volume';\r\n\r\ndescribe('Volume Loader', function() {\r\n  let loader;\r\n  const eventsHandleSpy = {};\r\n  const sourceUrl = '/base/data/dicom/adi_slice.dcm';\r\n  const baseSinonMatch = new sinon.match({file: sourceUrl}).and(new sinon.match.hasOwn('time'));\r\n\r\n  beforeEach(() => {\r\n    loader = new VolumeLoader();\r\n    // setup event handle spy\r\n    ['load-start',\r\n      'fetch-start',\r\n      'fetch-success',\r\n      'fetch-error',\r\n      'fetch-abort',\r\n      'fetch-timeout',\r\n      'fetch-progress',\r\n      'fetch-end',\r\n      'parse-start',\r\n      'parsing',\r\n      'parse-success',\r\n      'parse-error'].map((evtName) => {\r\n        eventsHandleSpy[evtName] = new sinon.spy();\r\n        loader.on(evtName, eventsHandleSpy[evtName]);\r\n      });\r\n  });\r\n\r\n  afterEach(() => {\r\n    loader = null;\r\n  });\r\n\r\n  describe('parse data', () => {\r\n    it('give a single url', (done) => {\r\n      loader.load(sourceUrl)\r\n                .then((data) => {\r\n                  expect(Array.isArray(data)).toBe(true);\r\n                  expect(data.length).toBe(1);\r\n                  // just test events of parse, the other events test at loader.base.spec.js\r\n                  sinon.assert.calledWith(eventsHandleSpy['parse-start'], baseSinonMatch);\r\n                  sinon.assert.calledWith(eventsHandleSpy['parsing'], baseSinonMatch\r\n                                                                        .and(new sinon.match.hasOwn('total'))\r\n                                                                        .and(new sinon.match.hasOwn('parsed')));\r\n                  sinon.assert.calledWith(eventsHandleSpy['parse-success'], baseSinonMatch\r\n                                                                        .and(new sinon.match.hasOwn('total'))\r\n                                                                        .and(new sinon.match.hasOwn('parsed')));\r\n                  done();\r\n                });\r\n    });\r\n\r\n    it('give urls with array', (done) => {\r\n      const urls = [\r\n        '/base/data/dicom/adi_slice.dcm',\r\n        '/base/data/nifti/adi_slice.nii',\r\n      ];\r\n      loader.load(urls)\r\n                .then((data) => {\r\n                  expect(Array.isArray(data)).toBe(true);\r\n                  expect(data.length).toBe(2);\r\n                  done();\r\n                });\r\n    });\r\n  });\r\n});\r\n"]}