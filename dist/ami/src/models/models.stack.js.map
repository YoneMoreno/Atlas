{"version":3,"sources":["../../../../ami/src/models/models.stack.js"],"names":["binaryString","require","ModelsStack","_uid","_stackID","_frame","_numberOfFrames","_rows","_columns","_numberOfChannels","_bitsAllocated","_pixelType","_pixelRepresentation","_textureSize","_nbTextures","_rawData","_windowCenter","_windowWidth","_rescaleSlope","_rescaleIntercept","_minMax","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","_regMatrix","_ijk2LPS","_lps2IJK","_aabb2LPS","_lps2AABB","_dimensionsIJK","_halfDimensionsIJK","_spacing","_spacingBetweenSlices","_sliceThickness","_origin","_rightHanded","_xCosine","_yCosine","_zCosine","_prepared","_packed","_packedPerPixel","_modality","_segmentationType","_segmentationSegments","_segmentationDefaultColor","_frameSegment","_segmentationLUT","_segmentationLUTO","_invert","mergedFrames","computeCosines","map","_computeDistanceArrayMap","bind","sort","_sortDistanceArraySort","prevIndex","i","length","_dist","push","k","_pixelData","_referencedSegmentNumber","pixelData","minMax","dict","max","Math","parseInt","segmentNumber","color","recommendedDisplayCIELab","cielab2RGB","index","opacity","rgb","hasOwnProperty","toString","prepareSegmentation","window","console","log","rows","columns","x","y","z","spacingBetweenSlices","sliceThickness","orderFrames","computeSpacing","imagePosition","imageOrientation","_arrayToVector3","computeIJK2LPS","computeLPS2AABB","middleFrameIndex","floor","middleFrame","rescaleSlope","rescaleIntercept","computeMinMaxIntensities","rescaleSlopeIntercept","width","windowWidth","center","windowCenter","bitsAllocated","echos","packedEcho","frame","j","cosines","dimensionIndexValues","_orderFrameOnDimensionIndicesArraySort","join","instanceNumber","_sortInstanceNumberArraySort","sopInstanceUID","_sortSopInstanceUIDArraySort","xySpacing","zSpacing","pixelSpacing","dist","spacingXY","min","isNaN","ijk2LPS","getInverse","aabb2LPS","stack","stackID","mergeModels","nbVoxels","textureDimension","requiredTextures","ceil","voxelIndexStart","voxelIndexStop","ii","packed","_packTo8Bits","_textureType","textureType","data","channels","textureSize","startVoxel","stopVoxel","pixelType","offset","packIndex","frameIndex","inFrameIndex","frameDimension","Uint8Array","raw","THREE","LuminanceFormat","coordinate","channelOffset","RGBAFormat","bitString","bitStringArray","match","RGBFormat","clone","addScalar","applyMatrix4","bbox","dims","world","world0","world7","minBBox","abs","centerBBox","worldCenter","array","a","b","Object","prototype","call","normal","numberOfChannels","prepared","packedPerPixel","dimensionsIJK","halfDimensionsIJK","regMatrix","lps2IJK","lps2AABB","rawData","xCosine","yCosine","zCosine","pixelRepresentation","invert","modality","rightHanded","segmentationSegments","segmentationType","segmentationLUT","segmentationLUTO","dimensions","warn","value","slope","intercept","worldCoordinates","worldToData"],"mappings":"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","file":"models.stack.js","sourcesContent":["/** * Imports ***/\r\nimport {Vector3, Matrix4} from 'three';\r\nimport CoreColors from '../core/core.colors';\r\nimport CoreUtils from '../core/core.utils';\r\nimport ModelsBase from '../models/models.base';\r\n\r\nconst binaryString = require('math-float32-to-binary-string');\r\n\r\n/**\r\n * Stack object.\r\n *\r\n * @module models/stack\r\n */\r\nexport default class ModelsStack extends ModelsBase {\r\n  /**\r\n   * Models Stack constructor\r\n   */\r\n  constructor() {\r\n    super();\r\n\r\n    this._uid = null;\r\n    this._stackID = -1;\r\n\r\n    this._frame = [];\r\n    this._numberOfFrames = 0;\r\n\r\n    this._rows = 0;\r\n    this._columns = 0;\r\n    this._numberOfChannels = 1;\r\n    this._bitsAllocated = 8;\r\n    this._pixelType = 0;\r\n    this._pixelRepresentation = 0;\r\n\r\n    this._textureSize = 4096;\r\n    this._nbTextures = 7;\r\n    this._rawData = [];\r\n\r\n    this._windowCenter = 0;\r\n    this._windowWidth = 0;\r\n\r\n    this._rescaleSlope = 1;\r\n    this._rescaleIntercept = 0;\r\n\r\n    this._minMax = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];\r\n\r\n    // TRANSFORMATION MATRICES\r\n    this._regMatrix = new Matrix4();\r\n\r\n    this._ijk2LPS = null;\r\n    this._lps2IJK = null;\r\n\r\n    this._aabb2LPS = null;\r\n    this._lps2AABB = null;\r\n\r\n    //\r\n    // IJK dimensions\r\n    this._dimensionsIJK = null;\r\n    this._halfDimensionsIJK = null;\r\n    this._spacing = new Vector3(1, 1, 1);\r\n    this._spacingBetweenSlices = 0;\r\n    this._sliceThickness = 0;\r\n    this._origin = null;\r\n    this._rightHanded = true;\r\n    this._xCosine = new Vector3(1, 0, 0);\r\n    this._yCosine = new Vector3(0, 1, 0);\r\n    this._zCosine = new Vector3(0, 0, 1);\r\n\r\n    // convenience vars\r\n    this._prepared = false;\r\n    this._packed = false;\r\n    this._packedPerPixel = 1;\r\n\r\n    //\r\n    this._modality = 'Modality not set';\r\n\r\n    // SEGMENTATION STUFF\r\n    this._segmentationType = null;\r\n    this._segmentationSegments = [];\r\n    this._segmentationDefaultColor = [63, 174, 128];\r\n    this._frameSegment = [];\r\n    this._segmentationLUT = [];\r\n    this._segmentationLUTO = [];\r\n\r\n    // photometricInterpretation Monochrome1 VS Monochrome2\r\n    this._invert = false;\r\n  }\r\n\r\n  /**\r\n   * Prepare segmentation stack.\r\n   * A segmentation stack can hold x frames that are at the same location\r\n   * but segmentation specific information:\r\n   * - Frame X contains voxels for segmentation A.\r\n   * - Frame Y contains voxels for segmenttation B.\r\n   * - Frame X and Y are at the same location.\r\n   *\r\n   * We currently merge overlaping frames into 1.\r\n   */\r\n  prepareSegmentation() {\r\n    // store frame and do special pre-processing\r\n    this._frameSegment = this._frame;\r\n    let mergedFrames = [];\r\n\r\n    // order frames\r\n    this.computeCosines();\r\n    this._frame.map(this._computeDistanceArrayMap.bind(null, this._zCosine));\r\n    this._frame.sort(this._sortDistanceArraySort);\r\n\r\n    // merge frames\r\n    let prevIndex = -1;\r\n    for (let i = 0; i<this._frame.length; i++) {\r\n      if (!mergedFrames[prevIndex] ||\r\n          mergedFrames[prevIndex]._dist != this._frame[i]._dist) {\r\n        mergedFrames.push(this._frame[i]);\r\n        prevIndex++;\r\n\r\n        // Scale frame\r\n        // by default each frame contains binary data about a segmentation.\r\n        // we scale it by the referenceSegmentNumber in order to have a\r\n        // segmentation specific voxel value rather than 0 or 1.\r\n        // That allows us to merge frames later on.\r\n        // If we merge frames without scaling, then we can not differenciate\r\n        // voxels from segmentation A or B as the value is 0 or 1 in both cases.\r\n        for (\r\n          let k=0;\r\n          k<mergedFrames[prevIndex]._rows * mergedFrames[prevIndex]._columns;\r\n          k++) {\r\n          mergedFrames[prevIndex]._pixelData[k] *=\r\n            this._frame[i]._referencedSegmentNumber;\r\n        }\r\n      } else {\r\n        // frame already exsits at this location.\r\n        // merge data from this segmentation into existing frame\r\n        for (\r\n          let k=0;\r\n          k<mergedFrames[prevIndex]._rows * mergedFrames[prevIndex]._columns;\r\n          k++) {\r\n          mergedFrames[prevIndex]._pixelData[k] +=\r\n            this._frame[i].pixelData[k] *\r\n              this._frame[i]._referencedSegmentNumber;\r\n        }\r\n      }\r\n\r\n      mergedFrames[prevIndex].minMax =\r\n        CoreUtils.minMax(mergedFrames[prevIndex]._pixelData);\r\n    }\r\n\r\n    // get information about segments\r\n    let dict = {};\r\n    let max = 0;\r\n    for (let i = 0; i<this._segmentationSegments.length; i++) {\r\n      max =\r\n        Math.max(\r\n          max, parseInt(this._segmentationSegments[i].segmentNumber, 10));\r\n\r\n      let color = this._segmentationSegments[i].recommendedDisplayCIELab;\r\n      if (color === null) {\r\n        dict[this._segmentationSegments[i].segmentNumber] =\r\n          this._segmentationDefaultColor;\r\n      } else {\r\n        dict[this._segmentationSegments[i].segmentNumber] =\r\n          CoreColors.cielab2RGB(...color);\r\n      }\r\n    }\r\n\r\n    // generate LUTs\r\n    for (let i = 0; i <= max; i++) {\r\n      let index = i / max;\r\n      let opacity = i ? 1 : 0;\r\n      let rgb = [0, 0, 0];\r\n      if (dict.hasOwnProperty(i.toString())) {\r\n        rgb = dict[i.toString()];\r\n      }\r\n\r\n      rgb[0] /= 255;\r\n      rgb[1] /= 255;\r\n      rgb[2] /= 255;\r\n\r\n      this._segmentationLUT.push([index, ...rgb]);\r\n      this._segmentationLUTO.push([index, opacity]);\r\n    }\r\n\r\n    this._frame = mergedFrames;\r\n  }\r\n\r\n  /**\r\n   * Compute cosines\r\n   * Order frames\r\n   * computeSpacing\r\n   * sanityCheck\r\n   * init some vars\r\n   * compute min/max\r\n   * compute transformation matrices\r\n   *\r\n   * @return {*}\r\n   */\r\n  prepare() {\r\n    // if segmentation, merge some frames...\r\n    if (this._modality === 'SEG') {\r\n      this.prepareSegmentation();\r\n    }\r\n\r\n    // we need at least 1 frame\r\n    if (this._frame && this._frame.length > 0) {\r\n      this._numberOfFrames = this._frame.length;\r\n    } else {\r\n      window.console.log('_frame doesn\\'t contain anything....');\r\n      window.console.log(this._frame);\r\n      return false;\r\n    }\r\n\r\n    // pass parameters from frame to stack\r\n    this._rows = this._frame[0].rows;\r\n    this._columns = this._frame[0].columns;\r\n    this._dimensionsIJK =\r\n      new Vector3(this._columns, this._rows, this._numberOfFrames);\r\n    this._halfDimensionsIJK = new Vector3(\r\n      this._dimensionsIJK.x / 2,\r\n      this._dimensionsIJK.y / 2,\r\n      this._dimensionsIJK.z / 2\r\n    );\r\n    this._spacingBetweenSlices = this._frame[0].spacingBetweenSlices;\r\n    this._sliceThickness = this._frame[0].sliceThickness;\r\n\r\n    // compute direction cosines\r\n    this.computeCosines();\r\n\r\n    // order the frames\r\n    this.orderFrames();\r\n\r\n    // compute/guess spacing\r\n    this.computeSpacing();\r\n    // set extra vars if nulls\r\n    // do it now because before we would think image position/orientation\r\n    // are defined and we would use it to compute spacing.\r\n    if (!this._frame[0].imagePosition) {\r\n      this._frame[0].imagePosition = [0, 0, 0];\r\n    }\r\n    if (!this._frame[0].imageOrientation) {\r\n      this._frame[0].imageOrientation = [1, 0, 0, 0, 1, 0];\r\n    }\r\n\r\n    this._origin = this._arrayToVector3(this._frame[0].imagePosition, 0);\r\n\r\n    // compute transforms\r\n    this.computeIJK2LPS();\r\n\r\n    this.computeLPS2AABB();\r\n    // this.packEchos();\r\n\r\n    const middleFrameIndex = Math.floor(this._frame.length / 2);\r\n    const middleFrame = this._frame[middleFrameIndex];\r\n\r\n    this._rescaleSlope = middleFrame.rescaleSlope || 1;\r\n    this._rescaleIntercept = middleFrame.rescaleIntercept || 0;\r\n\r\n    // rescale/slope min max\r\n    this.computeMinMaxIntensities();\r\n    this._minMax[0] = CoreUtils.rescaleSlopeIntercept(\r\n      this._minMax[0],\r\n      this._rescaleSlope,\r\n      this._rescaleIntercept);\r\n    this._minMax[1] = CoreUtils.rescaleSlopeIntercept(\r\n      this._minMax[1],\r\n      this._rescaleSlope,\r\n      this._rescaleIntercept);\r\n\r\n    let width =\r\n      middleFrame.windowWidth * this._rescaleSlope || this._minMax[1] - this._minMax[0];\r\n    this._windowWidth = width + this._rescaleIntercept;\r\n\r\n    let center =\r\n      middleFrame.windowCenter * this._rescaleSlope || this._minMax[0] + width / 2;\r\n    this._windowCenter = center + this._rescaleIntercept;\r\n\r\n    this._bitsAllocated = middleFrame.bitsAllocated;\r\n    this._prepared = true;\r\n  }\r\n\r\n  packEchos() {\r\n    // 4 echo times...\r\n    let echos = 4;\r\n    let packedEcho = [];\r\n    for (let i=0; i< this._frame.length; i+=echos) {\r\n      let frame = this._frame[i];\r\n      for (let k=0; k<this._rows * this._columns; k++) {\r\n        for (let j=1; j<echos; j++) {\r\n          frame.pixelData[k] += this._frame[i+j].pixelData[k];\r\n        }\r\n        frame.pixelData[k] /= echos;\r\n      }\r\n      packedEcho.push(frame);\r\n    }\r\n    this._frame = packedEcho;\r\n    this._numberOfFrames = this._frame.length;\r\n    this._dimensionsIJK =\r\n      new Vector3(this._columns, this._rows, this._numberOfFrames);\r\n    this._halfDimensionsIJK = new Vector3(\r\n      this._dimensionsIJK.x / 2,\r\n      this._dimensionsIJK.y / 2,\r\n      this._dimensionsIJK.z / 2\r\n    );\r\n  }\r\n\r\n  // frame.cosines - returns array [x, y, z]\r\n  computeCosines() {\r\n    if (this._frame &&\r\n      this._frame[0]) {\r\n      let cosines = this._frame[0].cosines();\r\n      this._xCosine = cosines[0];\r\n      this._yCosine = cosines[1];\r\n      this._zCosine = cosines[2];\r\n    }\r\n  }\r\n\r\n  orderFrames() {\r\n    // order the frames based on theirs dimension indices\r\n    // first index is the most important.\r\n    // 1,1,1,1 willl be first\r\n    // 1,1,2,1 will be next\r\n    // 1,1,2,3 will be next\r\n    // 1,1,3,1 wil be next\r\n    if (this._frame[0].dimensionIndexValues) {\r\n      this._frame.sort(this._orderFrameOnDimensionIndicesArraySort);\r\n\r\n    // else order with image position and orientation\r\n    } else if (\r\n      this._frame[0].imagePosition && this._frame[0].imageOrientation &&\r\n      this._frame[1] &&\r\n      this._frame[1].imagePosition && this._frame[1].imageOrientation &&\r\n      this._frame[0].imagePosition.join() !== this._frame[1].imagePosition.join()) {\r\n      // compute and sort by dist in this series\r\n      this._frame.map(this._computeDistanceArrayMap.bind(null, this._zCosine));\r\n      this._frame.sort(this._sortDistanceArraySort);\r\n    } else if (\r\n      this._frame[0].instanceNumber !== null &&\r\n      this._frame[1] && this._frame[1].instanceNumber !== null &&\r\n      this._frame[0].instanceNumber !== this._frame[1].instanceNumber) {\r\n      this._frame.sort(this._sortInstanceNumberArraySort);\r\n    } else if (\r\n      this._frame[0].sopInstanceUID &&\r\n      this._frame[1] && this._frame[1].sopInstanceUID &&\r\n      this._frame[0].sopInstanceUID !== this._frame[1].sopInstanceUID) {\r\n      this._frame.sort(this._sortSopInstanceUIDArraySort);\r\n    } else {\r\n      // window.console.log(this._frame[0]);\r\n      // window.console.log(this._frame[1]);\r\n      // window.console.log(this._frame[0].instanceNumber !== null && true);\r\n      // window.console.log(\r\n      // this._frame[0].instanceNumber !== this._frame[1].instanceNumber);\r\n      window.console.log('do not know how to order the frames...');\r\n      // else slice location\r\n      // image number\r\n      // ORDERING BASED ON instance number\r\n      // _ordering = 'instance_number';\r\n      // first_image.sort(function(a,b){\r\n      // return a[\"instance_number\"]-b[\"instance_number\"]});\r\n    }\r\n  }\r\n\r\n  computeSpacing() {\r\n    this.xySpacing();\r\n    this.zSpacing();\r\n  }\r\n\r\n  /**\r\n   * Compute stack z spacing\r\n   */\r\n  zSpacing() {\r\n    if (this._numberOfFrames > 1) {\r\n      if (this._frame[0].pixelSpacing && this._frame[0].pixelSpacing[2]) {\r\n        this._spacing.z = this._frame[0].pixelSpacing[2];\r\n      } else {\r\n        // compute and sort by dist in this series\r\n        this._frame.map(\r\n          this._computeDistanceArrayMap.bind(null, this._zCosine));\r\n\r\n        // if distances are different, re-sort array\r\n        if (this._frame[1].dist !== this._frame[0].dist) {\r\n          this._frame.sort(this._sortDistanceArraySort);\r\n          this._spacing.z = this._frame[1].dist - this._frame[0].dist;\r\n        } else if (this._spacingBetweenSlices) {\r\n          this._spacing.z = this._spacingBetweenSlices;\r\n        } else if (this._frame[0].sliceThickness) {\r\n          this._spacing.z = this._frame[0].sliceThickness;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Spacing\r\n    // can not be 0 if not matrix can not be inverted.\r\n    if (this._spacing.z === 0) {\r\n      this._spacing.z = 1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  FRAME CAN DO IT\r\n   */\r\n  xySpacing() {\r\n    if (this._frame &&\r\n      this._frame[0]) {\r\n      let spacingXY = this._frame[0].spacingXY();\r\n      this._spacing.x = spacingXY[0];\r\n      this._spacing.y = spacingXY[1];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find min and max intensities among all frames.\r\n   */\r\n  computeMinMaxIntensities() {\r\n    // what about colors!!!!?\r\n    // we ignore values if NaNs\r\n    // https://github.com/FNNDSC/ami/issues/185\r\n    for (let i = 0; i < this._frame.length; i++) {\r\n      // get min/max\r\n      let min = this._frame[i].minMax[0];\r\n      if (!Number.isNaN(min)) {\r\n        this._minMax[0] = Math.min(this._minMax[0], min);\r\n      }\r\n\r\n      let max = this._frame[i].minMax[1];\r\n      if (!Number.isNaN(max)) {\r\n        this._minMax[1] = Math.max(this._minMax[1], max);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compute IJK to LPS and invert transforms\r\n   */\r\n  computeIJK2LPS() {\r\n    // ijk to lps\r\n    this._ijk2LPS = CoreUtils.ijk2LPS(\r\n      this._xCosine, this._yCosine, this._zCosine,\r\n      this._spacing, this._origin,\r\n      this._regMatrix\r\n    );\r\n\r\n    // lps 2 ijk\r\n    this._lps2IJK = new Matrix4();\r\n    this._lps2IJK.getInverse(this._ijk2LPS);\r\n  }\r\n\r\n  /**\r\n   * Compute LPS to AABB and invert transforms\r\n   */\r\n  computeLPS2AABB() {\r\n    this._aabb2LPS = CoreUtils.aabb2LPS(\r\n      this._xCosine, this._yCosine, this._zCosine,\r\n      this._origin\r\n    );\r\n\r\n    this._lps2AABB = new Matrix4();\r\n    this._lps2AABB.getInverse(this._aabb2LPS);\r\n  }\r\n\r\n  /**\r\n   * Merge stacks\r\n   *\r\n   * @param {*} stack\r\n   *\r\n   * @return {*}\r\n   */\r\n  merge(stack) {\r\n    // also make sure x/y/z cosines are a match!\r\n    if (this._stackID === stack.stackID) {\r\n      return this.mergeModels(this._frame, stack.frame);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pack current stack pixel data into 8 bits array buffers\r\n   */\r\n  pack() {\r\n    // Get total number of voxels\r\n    const nbVoxels =\r\n      this._dimensionsIJK.x * this._dimensionsIJK.y * this._dimensionsIJK.z;\r\n\r\n    // Packing style\r\n    if (this._bitsAllocated === 16 && this._numberOfChannels === 1) {\r\n      this._packedPerPixel = 2;\r\n    }\r\n\r\n    // Loop through all the textures we need\r\n    const textureDimension = this._textureSize * this._textureSize;\r\n    const requiredTextures =\r\n      Math.ceil(nbVoxels / (textureDimension * this._packedPerPixel));\r\n    let voxelIndexStart = 0;\r\n    let voxelIndexStop = this._packedPerPixel * textureDimension;\r\n    if (voxelIndexStop > nbVoxels) {\r\n      voxelIndexStop = nbVoxels;\r\n    }\r\n\r\n    for (let ii = 0; ii < requiredTextures; ii++) {\r\n      let packed =\r\n        this._packTo8Bits(\r\n          this._numberOfChannels,\r\n          this._frame,\r\n          this._textureSize,\r\n          voxelIndexStart,\r\n          voxelIndexStop);\r\n      this._textureType = packed.textureType;\r\n      this._rawData.push(packed.data);\r\n\r\n      voxelIndexStart += this._packedPerPixel * textureDimension;\r\n      voxelIndexStop += this._packedPerPixel * textureDimension;\r\n      if (voxelIndexStop > nbVoxels) {\r\n        voxelIndexStop = nbVoxels;\r\n      }\r\n    }\r\n\r\n    this._packed = true;\r\n  }\r\n\r\n  /**\r\n   * Pack frame data to 32 bits texture\r\n   * @param {*} channels\r\n   * @param {*} frame\r\n   * @param {*} textureSize\r\n   * @param {*} startVoxel\r\n   * @param {*} stopVoxel\r\n   */\r\n  _packTo8Bits(channels, frame, textureSize, startVoxel, stopVoxel) {\r\n    const packed = {\r\n      textureType: null,\r\n      data: null,\r\n    };\r\n\r\n    const bitsAllocated = frame[0].bitsAllocated;\r\n    const pixelType = frame[0].pixelType;\r\n\r\n    // transform signed to unsigned for convenience\r\n    let offset = 0;\r\n    if (this._minMax[0] < 0) {\r\n      offset -= this._minMax[0];\r\n    }\r\n\r\n    let packIndex = 0;\r\n    let frameIndex = 0;\r\n    let inFrameIndex = 0;\r\n    // frame should return it!\r\n    const frameDimension = frame[0].rows * frame[0].columns;\r\n\r\n    if (bitsAllocated === 8 && channels === 1 || bitsAllocated === 1) {\r\n      let data = new Uint8Array(textureSize * textureSize * 1);\r\n      for (let i = startVoxel; i < stopVoxel; i++) {\r\n        frameIndex = ~~(i / frameDimension);\r\n        inFrameIndex = i % (frameDimension);\r\n\r\n        let raw = frame[frameIndex].pixelData[inFrameIndex] += offset;\r\n        if (!Number.isNaN(raw)) {\r\n          data[packIndex] = raw;\r\n        }\r\n\r\n        packIndex++;\r\n      }\r\n      packed.textureType = THREE.LuminanceFormat;\r\n      packed.data = data;\r\n    } else if (bitsAllocated === 16 && channels === 1) {\r\n      let data = new Uint8Array(textureSize * textureSize * 4);\r\n      let coordinate = 0;\r\n      let channelOffset = 0;\r\n\r\n      for (let i = startVoxel; i < stopVoxel; i++) {\r\n        frameIndex = ~~(i / frameDimension);\r\n        inFrameIndex = i % (frameDimension);\r\n\r\n\r\n        let raw = frame[frameIndex].pixelData[inFrameIndex] + offset;\r\n        if (!Number.isNaN(raw)) {\r\n          data[4 * coordinate + 2 * channelOffset] = raw & 0x00FF;\r\n          data[4 * coordinate + 2 * channelOffset + 1] = (raw >>> 8) & 0x00FF;\r\n        }\r\n\r\n        packIndex++;\r\n        coordinate = Math.floor(packIndex / 2);\r\n        channelOffset = packIndex % 2;\r\n      }\r\n\r\n      packed.textureType = THREE.RGBAFormat;\r\n      packed.data = data;\r\n    } else if (bitsAllocated === 32 && channels === 1 && pixelType === 0) {\r\n      let data = new Uint8Array(textureSize * textureSize * 4);\r\n      for (let i = startVoxel; i < stopVoxel; i++) {\r\n        frameIndex = ~~(i / frameDimension);\r\n        inFrameIndex = i % (frameDimension);\r\n\r\n        let raw = frame[frameIndex].pixelData[inFrameIndex] + offset;\r\n        if (!Number.isNaN(raw)) {\r\n          data[4 * packIndex] = raw & 0x000000FF;\r\n          data[4 * packIndex + 1] = (raw >>> 8) & 0x000000FF;\r\n          data[4 * packIndex + 2] = (raw >>> 16) & 0x000000FF;\r\n          data[4 * packIndex + 3] = (raw >>> 24) & 0x000000FF;\r\n        }\r\n\r\n        packIndex++;\r\n      }\r\n      packed.textureType = THREE.RGBAFormat;\r\n      packed.data = data;\r\n    } else if (bitsAllocated === 32 && channels === 1 && pixelType === 1) {\r\n      let data = new Uint8Array(textureSize * textureSize * 4);\r\n\r\n      for (let i = startVoxel; i < stopVoxel; i++) {\r\n        frameIndex = ~~(i / frameDimension);\r\n        inFrameIndex = i % (frameDimension);\r\n\r\n        let raw = frame[frameIndex].pixelData[inFrameIndex] + offset;\r\n        if (!Number.isNaN(raw)) {\r\n          let bitString = binaryString(raw);\r\n          let bitStringArray = bitString.match(/.{1,8}/g);\r\n\r\n          data[4 * packIndex] = parseInt(bitStringArray[0], 2);\r\n          data[4 * packIndex + 1] = parseInt(bitStringArray[1], 2);\r\n          data[4 * packIndex + 2] = parseInt(bitStringArray[2], 2);\r\n          data[4 * packIndex + 3] = parseInt(bitStringArray[3], 2);\r\n        }\r\n\r\n        packIndex++;\r\n      }\r\n\r\n      packed.textureType = THREE.RGBAFormat;\r\n      packed.data = data;\r\n    } else if (bitsAllocated === 8 && channels === 3) {\r\n      let data = new Uint8Array(textureSize * textureSize * 3);\r\n\r\n      for (let i = startVoxel; i < stopVoxel; i++) {\r\n        frameIndex = ~~(i / frameDimension);\r\n        inFrameIndex = i % (frameDimension);\r\n\r\n        data[3 * packIndex] =\r\n          frame[frameIndex].pixelData[3 * inFrameIndex];\r\n        data[3 * packIndex + 1] =\r\n          frame[frameIndex].pixelData[3 * inFrameIndex + 1];\r\n        data[3 * packIndex + 2] =\r\n          frame[frameIndex].pixelData[3 * inFrameIndex + 2];\r\n        packIndex++;\r\n      }\r\n\r\n      packed.textureType = THREE.RGBFormat;\r\n      packed.data = data;\r\n    }\r\n\r\n    return packed;\r\n  }\r\n\r\n  /**\r\n   * Get the stack world center\r\n   *\r\n   *@return {*}\r\n   */\r\n  worldCenter() {\r\n    let center = this._halfDimensionsIJK.clone().addScalar(-0.5)\r\n      .applyMatrix4(this._ijk2LPS);\r\n    return center;\r\n  }\r\n\r\n  /**\r\n   * Get the stack world bounding box\r\n   * @return {*}\r\n   */\r\n  worldBoundingBox() {\r\n    let bbox = [\r\n      Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY,\r\n      Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY,\r\n      Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY,\r\n    ];\r\n\r\n    const dims = this._dimensionsIJK;\r\n\r\n    for (let i = 0; i <= dims.x; i += dims.x) {\r\n      for (let j = 0; j <= dims.y; j += dims.y) {\r\n        for (let k = 0; k <= dims.z; k += dims.z) {\r\n          let world = new Vector3(i, j, k).applyMatrix4(this._ijk2LPS);\r\n          bbox = [\r\n            Math.min(bbox[0], world.x), Math.max(bbox[1], world.x), // x min/max\r\n            Math.min(bbox[2], world.y), Math.max(bbox[3], world.y),\r\n            Math.min(bbox[4], world.z), Math.max(bbox[5], world.z),\r\n            ];\r\n        }\r\n      }\r\n    }\r\n\r\n    return bbox;\r\n  }\r\n\r\n  /**\r\n   * Get AABB size in LPS space.\r\n   *\r\n   * @return {*}\r\n   */\r\n  AABBox() {\r\n    let world0 = new Vector3().addScalar(-0.5)\r\n      .applyMatrix4(this._ijk2LPS)\r\n      .applyMatrix4(this._lps2AABB);\r\n\r\n    let world7 = this._dimensionsIJK.clone().addScalar(-0.5)\r\n      .applyMatrix4(this._ijk2LPS)\r\n      .applyMatrix4(this._lps2AABB);\r\n\r\n    let minBBox = new Vector3(\r\n      Math.abs(world0.x - world7.x),\r\n      Math.abs(world0.y - world7.y),\r\n      Math.abs(world0.z - world7.z)\r\n    );\r\n\r\n    return minBBox;\r\n  }\r\n\r\n  /**\r\n   * Get AABB center in LPS space\r\n   */\r\n  centerAABBox() {\r\n    let centerBBox = this.worldCenter();\r\n    centerBBox.applyMatrix4(this._lps2AABB);\r\n    return centerBBox;\r\n  }\r\n\r\n  static indexInDimensions(index, dimensions) {\r\n    if (index.x >= 0 &&\r\n         index.y >= 0 &&\r\n         index.z >= 0 &&\r\n         index.x < dimensions.x &&\r\n         index.y < dimensions.y &&\r\n         index.z < dimensions.z) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  _arrayToVector3(array, index) {\r\n    return new Vector3(\r\n      array[index],\r\n      array[index + 1],\r\n      array[index + 2]\r\n      );\r\n  }\r\n\r\n  _orderFrameOnDimensionIndicesArraySort(a, b) {\r\n    if ('dimensionIndexValues' in a && Object.prototype.toString.call(a.dimensionIndexValues) === '[object Array]' && 'dimensionIndexValues' in b && Object.prototype.toString.call(b.dimensionIndexValues) === '[object Array]') {\r\n      for (let i = 0; i < a.dimensionIndexValues.length; i++) {\r\n        if (parseInt(a.dimensionIndexValues[i], 10) > parseInt(b.dimensionIndexValues[i], 10)) {\r\n          return 1;\r\n        }\r\n        if (parseInt(a.dimensionIndexValues[i], 10) < parseInt(b.dimensionIndexValues[i], 10)) {\r\n          return -1;\r\n        }\r\n      }\r\n    } else {\r\n      window.console.log('One of the frames doesn\\'t have a dimensionIndexValues array.');\r\n      window.console.log(a);\r\n      window.console.log(b);\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  _computeDistanceArrayMap(normal, frame) {\r\n    frame.dist = frame.imagePosition[0] * normal.x +\r\n      frame.imagePosition[1] * normal.y +\r\n      frame.imagePosition[2] * normal.z;\r\n    return frame;\r\n  }\r\n\r\n  _sortDistanceArraySort(a, b) {\r\n    return a.dist - b.dist;\r\n  }\r\n  _sortInstanceNumberArraySort(a, b) {\r\n    return a.instanceNumber - b.instanceNumber;\r\n  }\r\n  _sortSopInstanceUIDArraySort(a, b) {\r\n    return a.sopInstanceUID - b.sopInstanceUID;\r\n  }\r\n\r\n  set numberOfChannels(numberOfChannels) {\r\n    this._numberOfChannels = numberOfChannels;\r\n  }\r\n\r\n  get numberOfChannels() {\r\n    return this._numberOfChannels;\r\n  }\r\n\r\n  set frame(frame) {\r\n    this._frame = frame;\r\n  }\r\n\r\n  get frame() {\r\n    return this._frame;\r\n  }\r\n\r\n  set prepared(prepared) {\r\n    this._prepared = prepared;\r\n  }\r\n\r\n  get prepared() {\r\n    return this._prepared;\r\n  }\r\n\r\n  set packed(packed) {\r\n    this._packed = packed;\r\n  }\r\n\r\n  get packed() {\r\n    return this._packed;\r\n  }\r\n\r\n  set packedPerPixel(packedPerPixel) {\r\n    this._packedPerPixel = packedPerPixel;\r\n  }\r\n\r\n  get packedPerPixel() {\r\n    return this._packedPerPixel;\r\n  }\r\n\r\n  set dimensionsIJK(dimensionsIJK) {\r\n    this._dimensionsIJK = dimensionsIJK;\r\n  }\r\n\r\n  get dimensionsIJK() {\r\n    return this._dimensionsIJK;\r\n  }\r\n\r\n  set halfDimensionsIJK(halfDimensionsIJK) {\r\n    this._halfDimensionsIJK = halfDimensionsIJK;\r\n  }\r\n\r\n  get halfDimensionsIJK() {\r\n    return this._halfDimensionsIJK;\r\n  }\r\n\r\n  set regMatrix(regMatrix) {\r\n    this._regMatrix = regMatrix;\r\n  }\r\n\r\n  get regMatrix() {\r\n    return this._regMatrix;\r\n  }\r\n\r\n  set ijk2LPS(ijk2LPS) {\r\n    this._ijk2LPS = ijk2LPS;\r\n  }\r\n\r\n  get ijk2LPS() {\r\n    return this._ijk2LPS;\r\n  }\r\n\r\n  set lps2IJK(lps2IJK) {\r\n    this._lps2IJK = lps2IJK;\r\n  }\r\n\r\n  get lps2IJK() {\r\n    return this._lps2IJK;\r\n  }\r\n\r\n  set lps2AABB(lps2AABB) {\r\n    this._lps2AABB = lps2AABB;\r\n  }\r\n\r\n  get lps2AABB() {\r\n    return this._lps2AABB;\r\n  }\r\n\r\n  set textureSize(textureSize) {\r\n    this._textureSize = textureSize;\r\n  }\r\n\r\n  get textureSize() {\r\n    return this._textureSize;\r\n  }\r\n\r\n  set textureType(textureType) {\r\n    this._textureType = textureType;\r\n  }\r\n\r\n  get textureType() {\r\n    return this._textureType;\r\n  }\r\n\r\n  set bitsAllocated(bitsAllocated) {\r\n    this._bitsAllocated = bitsAllocated;\r\n  }\r\n\r\n  get bitsAllocated() {\r\n    return this._bitsAllocated;\r\n  }\r\n\r\n  set rawData(rawData) {\r\n    this._rawData = rawData;\r\n  }\r\n\r\n  get rawData() {\r\n    return this._rawData;\r\n  }\r\n\r\n  get windowWidth() {\r\n    return this._windowWidth;\r\n  }\r\n\r\n  set windowWidth(windowWidth) {\r\n    this._windowWidth = windowWidth;\r\n  }\r\n\r\n  get windowCenter() {\r\n    return this._windowCenter;\r\n  }\r\n\r\n  set windowCenter(windowCenter) {\r\n    this._windowCenter = windowCenter;\r\n  }\r\n\r\n  get rescaleSlope() {\r\n    return this._rescaleSlope;\r\n  }\r\n\r\n  set rescaleSlope(rescaleSlope) {\r\n    this._rescaleSlope = rescaleSlope;\r\n  }\r\n\r\n  get rescaleIntercept() {\r\n    return this._rescaleIntercept;\r\n  }\r\n\r\n  set rescaleIntercept(rescaleIntercept) {\r\n    this._rescaleIntercept = rescaleIntercept;\r\n  }\r\n\r\n  get xCosine() {\r\n    return this._xCosine;\r\n  }\r\n\r\n  set xCosine(xCosine) {\r\n    this._xCosine = xCosine;\r\n  }\r\n\r\n  get yCosine() {\r\n    return this._yCosine;\r\n  }\r\n\r\n  set yCosine(yCosine) {\r\n    this._yCosine = yCosine;\r\n  }\r\n\r\n  get zCosine() {\r\n    return this._zCosine;\r\n  }\r\n\r\n  set zCosine(zCosine) {\r\n    this._zCosine = zCosine;\r\n  }\r\n\r\n  get minMax() {\r\n    return this._minMax;\r\n  }\r\n\r\n  set minMax(minMax) {\r\n    this._minMax = minMax;\r\n  }\r\n\r\n  get stackID() {\r\n    return this._stackID;\r\n  }\r\n\r\n  set stackID(stackID) {\r\n    this._stackID = stackID;\r\n  }\r\n\r\n  get pixelType() {\r\n    return this._pixelType;\r\n  }\r\n\r\n  set pixelType(pixelType) {\r\n    this._pixelType = pixelType;\r\n  }\r\n\r\n  get pixelRepresentation() {\r\n    return this._pixelRepresentation;\r\n  }\r\n\r\n  set pixelRepresentation(pixelRepresentation) {\r\n    this._pixelRepresentation = pixelRepresentation;\r\n  }\r\n\r\n  set invert(invert) {\r\n    this._invert = invert;\r\n  }\r\n\r\n  get invert() {\r\n    return this._invert;\r\n  }\r\n\r\n  set modality(modality) {\r\n    this._modality = modality;\r\n  }\r\n\r\n  get modality() {\r\n    return this._modality;\r\n  }\r\n\r\n  get rightHanded() {\r\n    return this._rightHanded;\r\n  }\r\n\r\n  set rightHanded(rightHanded) {\r\n    this._rightHanded = rightHanded;\r\n  }\r\n\r\n  get spacingBetweenSlices() {\r\n    return this._spacingBetweenSlices;\r\n  }\r\n\r\n  set spacingBetweenSlices(spacingBetweenSlices) {\r\n    this._spacingBetweenSlices = spacingBetweenSlices;\r\n  }\r\n\r\n  set segmentationSegments(segmentationSegments) {\r\n    this._segmentationSegments = segmentationSegments;\r\n  }\r\n\r\n  get segmentationSegments() {\r\n    return this._segmentationSegments;\r\n  }\r\n\r\n  set segmentationType(segmentationType) {\r\n    this._segmentationType = segmentationType;\r\n  }\r\n\r\n  get segmentationType() {\r\n    return this._segmentationType;\r\n  }\r\n\r\n  set segmentationLUT(segmentationLUT) {\r\n    this._segmentationLUT = segmentationLUT;\r\n  }\r\n\r\n  get segmentationLUT() {\r\n    return this._segmentationLUT;\r\n  }\r\n\r\n  set segmentationLUTO(segmentationLUTO) {\r\n    this._segmentationLUTO = segmentationLUTO;\r\n  }\r\n\r\n  get segmentationLUTO() {\r\n    return this._segmentationLUTO;\r\n  }\r\n\r\n  // DEPRECATED FUNCTION\r\n\r\n  /**\r\n   * @deprecated for core.utils.value\r\n   *\r\n   * Get voxel value.\r\n   *\r\n   * @param {*} stack\r\n   * @param {*} coordinate\r\n   *\r\n   * @return {*}\r\n   */\r\n  static value(stack, coordinate) {\r\n    window.console.warn(\r\n      `models.stack.value is deprecated.\r\n       Please use core.utils.value instead.`);\r\n    return CoreUtils.value(stack, coordinate);\r\n  }\r\n\r\n  /**\r\n   * @deprecated for core.utils.rescaleSlopeIntercept\r\n   *\r\n   * Apply slope/intercept to a value.\r\n   *\r\n   * @param {*} value\r\n   * @param {*} slope\r\n   * @param {*} intercept\r\n   *\r\n   * @return {*}\r\n   */\r\n  static valueRescaleSlopeIntercept(value, slope, intercept) {\r\n    window.console.warn(\r\n      `models.stack.valueRescaleSlopeIntercept is deprecated.\r\n       Please use core.utils.rescaleSlopeIntercept instead.`);\r\n    return CoreUtils.rescaleSlopeIntercept(\r\n      value, slope, intercept);\r\n  }\r\n\r\n  /**\r\n   * @deprecated for core.utils.worldToData\r\n   *\r\n   * Transform coordinates from world coordinate to data\r\n   *\r\n   * @param {*} stack\r\n   * @param {*} worldCoordinates\r\n   *\r\n   * @return {*}\r\n   */\r\n  static worldToData(stack, worldCoordinates) {\r\n    window.console.warn(\r\n      `models.stack.worldToData is deprecated.\r\n       Please use core.utils.worldToData instead.`);\r\n\r\n    return CoreUtils.worldToData(stack._lps2IJK, worldCoordinates);\r\n  }\r\n}\r\n"]}