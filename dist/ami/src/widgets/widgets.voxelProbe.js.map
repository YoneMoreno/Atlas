{"version":3,"sources":["../../../../ami/src/widgets/widgets.voxelProbe.js"],"names":["WidgetsVoxelProbe","stack","targetMesh","controls","camera","container","_stack","_targetMesh","_controls","_camera","_plane","position","direction","_offset","_raycaster","THREE","Raycaster","_tracking","_mouse","_lastEvent","_worldPosition","_screenPosition","_material","_geometry","_mesh","_meshDisplayed","_meshHovered","_meshStyle","_dom","_domDisplayed","_domHovered","_domStyle","copy","worldToScreen","_container","create","initOffsets","onMove","bind","onHover","onEndControl","addEventListeners","addEventListener","removeEventListener","evt","preventDefault","offsets","getMouseOffsets","set","x","y","setFromCamera","ray","origin","_hovered","_active","enabled","intersectsTarget","intersectObject","length","point","sub","getWorldDirection","intersection","rayPlane","update","_dragged","_selected","window","requestAnimationFrame","hoverDom","hoverMesh","style","cursor","intersectsHandle","type","worldCoordinate","canvas","screenCoordinates","clone","project","Math","round","offsetWidth","offsetHeight","z","createVoxel","createMesh","createDOM","_voxel","id","worldCoordinates","_worldCoordinates","dataCoordinates","worldToData","MeshBasicMaterial","wireframe","wireframeLinewidth","Mesh","applyMatrix","ijk2LPS","visible","updateMeshColor","add","color","_color","document","createElement","setAttribute","uuid","border","backgroundColor","transformOrigin","measurementsContainer","lpsContainer","appendChild","ijkContainer","valueContainer","updateDOMColor","rasContainer","querySelector","innerHTML","toFixed","value","updateColor","updateVoxel","geometry","location","updateMatrix","updateDOMContent","updateDOMPosition","valueRescaleSlopeIntercept","rescaleSlope","rescaleIntercept","posY","transform","borderColor","onMouseUpHandler","onMouseMoveHandler","removeTest","remove","mouseScreenCoordinates","currentDataCoordinates","dx","screenX","voxel","dy","screenY","distance","sqrt","_hover","display","showDOM","showMesh","hideDOM","hideMesh","worldPosition","defaultColor","_defaultColor","activeColor","_activeColor","hoverColor","_hoverColor","selectedColor","_selectedColor","showVoxel","_showVoxel","showDomSVG","_showDomSVG","showDomMeasurements","_showDomMeasurements"],"mappings":"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","file":"widgets.voxelProbe.js","sourcesContent":["\r\nimport WidgetsBase from './widgets.base';\r\nimport GeometriesVoxel from '../geometries/geometries.voxel';\r\nimport ModelsStack from '../models/models.stack';\r\nimport ModelsVoxel from '../models/models.voxel';\r\nimport CoreIntersections from '../core/core.intersections';\r\n\r\nimport {Vector2, Vector3} from 'three';\r\n\r\n/**\r\n * @module widgets/voxelProbe\r\n */\r\n\r\nexport default class WidgetsVoxelProbe extends WidgetsBase {\r\n  constructor(stack, targetMesh, controls, camera, container) {\r\n    super(container);\r\n\r\n    this._stack = stack;\r\n\r\n    this._targetMesh = targetMesh;\r\n    this._controls = controls;\r\n    this._camera = camera;\r\n\r\n    // if no target mesh, use plane for FREE dragging.\r\n    this._plane = {\r\n        position: new Vector3(),\r\n        direction: new Vector3(),\r\n    };\r\n\r\n    this._offset = new Vector3();\r\n    this._raycaster = new THREE.Raycaster();\r\n\r\n    this._tracking = false;\r\n\r\n    this._mouse = new Vector2();\r\n    this._lastEvent = null;\r\n\r\n    // world (LPS) position of the center\r\n    this._worldPosition = new Vector3();\r\n\r\n    // screen position of the center\r\n    this._screenPosition = new Vector2();\r\n\r\n    // mesh stuff\r\n    this._material = null;\r\n    this._geometry = null;\r\n    this._mesh = null;\r\n    this._meshDisplayed = true;\r\n    this._meshHovered = false;\r\n    this._meshStyle = 'sphere'; // cube, etc.\r\n\r\n    // dom stuff\r\n    this._dom = null;\r\n    this._domDisplayed = true;\r\n    this._domHovered = false;\r\n    this._domStyle = 'circle'; // square, triangle\r\n\r\n    if (this._targetMesh !== null) {\r\n      this._worldPosition.copy(this._targetMesh.position);\r\n    }\r\n\r\n    this._screenPosition =\r\n      this.worldToScreen(this._worldPosition, this._camera, this._container);\r\n\r\n    // create handle\r\n    this.create();\r\n    this.initOffsets();\r\n\r\n    // event listeners\r\n    this.onMove = this.onMove.bind(this);\r\n    this.onHover = this.onHover.bind(this);\r\n    this.onEndControl = this.onEndControl.bind(this);\r\n    this.addEventListeners();\r\n  }\r\n\r\n  addEventListeners() {\r\n    this._dom.addEventListener('mouseenter', this.onHover);\r\n    this._dom.addEventListener('mouseleave', this.onHover);\r\n\r\n    this._container.addEventListener('mousewheel', this.onMove);\r\n    this._container.addEventListener('DOMMouseScroll', this.onMove);\r\n\r\n    this._controls.addEventListener('end', this.onEndControl);\r\n  }\r\n\r\n  removeEventListeners() {\r\n    this._dom.removeEventListener('mouseenter', this.onHover);\r\n    this._dom.removeEventListener('mouseleave', this.onHover);\r\n\r\n    this._container.removeEventListener('mousewheel', this.onMove);\r\n    this._container.removeEventListener('DOMMouseScroll', this.onMove);\r\n\r\n    this._controls.removeEventListener('end', this.onEndControl);\r\n  }\r\n\r\n  onStart(evt) {\r\n    this._lastEvent = evt;\r\n    evt.preventDefault();\r\n\r\n    const offsets = this.getMouseOffsets(evt, this._container);\r\n    this._mouse.set(offsets.x, offsets.y);\r\n\r\n    // update raycaster\r\n    this._raycaster.setFromCamera(this._mouse, this._camera);\r\n    this._raycaster.ray.position = this._raycaster.ray.origin;\r\n\r\n    if (this._hovered) {\r\n      this._active = true;\r\n      this._controls.enabled = false;\r\n\r\n      if (this._targetMesh) {\r\n        let intersectsTarget =\r\n          this._raycaster.intersectObject(this._targetMesh);\r\n        if (intersectsTarget.length > 0) {\r\n          this._offset.copy(intersectsTarget[0].point).sub(this._worldPosition);\r\n        }\r\n      } else {\r\n        this._plane.position.copy(this._worldPosition);\r\n        this._plane.direction.copy(this._camera.getWorldDirection());\r\n        let intersection =\r\n          CoreIntersections.rayPlane(this._raycaster.ray, this._plane);\r\n        if (intersection !== null) {\r\n          this._offset.copy(intersection).sub(this._plane.position);\r\n        }\r\n      }\r\n\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  onEnd(evt) {\r\n    this._lastEvent = evt;\r\n    evt.preventDefault();\r\n\r\n    // stay active and keep controls disabled\r\n    if (this._tracking === true) {\r\n      return;\r\n    }\r\n\r\n    // unselect if go up without moving\r\n    if (!this._dragged && this._active) {\r\n      // change state if was not dragging\r\n      this._selected = !this._selected;\r\n    }\r\n\r\n    this._active = false;\r\n    this._dragged = false;\r\n    this._controls.enabled = true;\r\n\r\n    this.update();\r\n  }\r\n\r\n  onEndControl() {\r\n    if (!this._lastEvent) {\r\n      return;\r\n    }\r\n\r\n    window.requestAnimationFrame(() => {\r\n      this.onMove(this._lastEvent);\r\n    });\r\n  }\r\n\r\n  onMove(evt) {\r\n    this._lastEvent = evt;\r\n    evt.preventDefault();\r\n\r\n    const offsets = this.getMouseOffsets(evt, this._container);\r\n    this._mouse.set(offsets.x, offsets.y);\r\n\r\n    // update raycaster\r\n    // set ray.position to satisfy CoreIntersections::rayPlane API\r\n    this._raycaster.setFromCamera(this._mouse, this._camera);\r\n    this._raycaster.ray.position = this._raycaster.ray.origin;\r\n\r\n    if (this._active) {\r\n      this._dragged = true;\r\n\r\n      if (this._targetMesh !== null) {\r\n        let intersectsTarget =\r\n          this._raycaster.intersectObject(this._targetMesh);\r\n        if (intersectsTarget.length > 0) {\r\n          this._worldPosition.copy(intersectsTarget[0].point.sub(this._offset));\r\n        }\r\n      } else {\r\n        if (this._plane.direction.length() === 0) {\r\n          // free mode!this._targetMesh\r\n          this._plane.position.copy(this._worldPosition);\r\n          this._plane.direction.copy(this._camera.getWorldDirection());\r\n         }\r\n\r\n        let intersection =\r\n          CoreIntersections.rayPlane(this._raycaster.ray, this._plane);\r\n        if (intersection !== null) {\r\n          this._worldPosition.copy(intersection.sub(this._offset));\r\n        }\r\n      }\r\n    } else {\r\n      this.onHover(null);\r\n    }\r\n\r\n    this.update();\r\n  }\r\n\r\n  onHover(evt) {\r\n    if (evt) {\r\n      this._lastEvent = evt;\r\n      evt.preventDefault();\r\n      this.hoverDom(evt);\r\n    }\r\n\r\n    this.hoverMesh();\r\n\r\n    this._hovered = this._meshHovered || this._domHovered;\r\n    this._container.style.cursor = this._hovered ? 'pointer' : 'default';\r\n  }\r\n\r\n  hoverMesh() {\r\n    // check raycast intersection, do we want to hover on mesh or just css?\r\n    let intersectsHandle = this._raycaster.intersectObject(this._mesh);\r\n    this._meshHovered = (intersectsHandle.length > 0);\r\n  }\r\n\r\n  hoverDom(evt) {\r\n    this._domHovered = (evt.type === 'mouseenter');\r\n  }\r\n\r\n  worldToScreen(worldCoordinate, camera, canvas) {\r\n    let screenCoordinates = worldCoordinate.clone();\r\n    screenCoordinates.project(camera);\r\n\r\n    screenCoordinates.x =\r\n      Math.round((screenCoordinates.x + 1) * canvas.offsetWidth / 2);\r\n    screenCoordinates.y =\r\n      Math.round((-screenCoordinates.y + 1) * canvas.offsetHeight / 2);\r\n    screenCoordinates.z = 0;\r\n\r\n    return screenCoordinates;\r\n  }\r\n\r\n  create() {\r\n    this.createVoxel();\r\n    this.createMesh();\r\n    this.createDOM();\r\n  }\r\n\r\n  createVoxel() {\r\n    this._voxel = new ModelsVoxel();\r\n    this._voxel.id = this.id;\r\n    this._voxel.worldCoordinates = this._worldCoordinates;\r\n  }\r\n\r\n  createMesh() {\r\n    const dataCoordinates = ModelsStack.worldToData(\r\n      this._stack,\r\n      this._worldPosition);\r\n\r\n    this._geometry = new GeometriesVoxel(dataCoordinates);\r\n    this._material = new THREE.MeshBasicMaterial({\r\n        wireframe: true,\r\n        wireframeLinewidth: 1,\r\n      });\r\n    this._mesh = new THREE.Mesh(this._geometry, this._material);\r\n    this._mesh.applyMatrix(this._stack.ijk2LPS);\r\n    this._mesh.visible = true;\r\n\r\n    this.updateMeshColor();\r\n\r\n    this.add(this._mesh);\r\n  }\r\n\r\n  updateMeshColor() {\r\n    if (this._material) {\r\n      this._material.color.set(this._color);\r\n    }\r\n  }\r\n\r\n  createDOM() {\r\n    // dom\r\n    this._dom = document.createElement('div');\r\n    this._dom.setAttribute('id', this.uuid);\r\n    this._dom.setAttribute('class', 'AMI Widget VoxelProbe');\r\n    this._dom.style.border = '2px solid #000';\r\n    this._dom.style.backgroundColor = 'rgb(249, 249, 249)';\r\n    this._dom.style.color = '#212121';\r\n    this._dom.style.position = 'absolute';\r\n    this._dom.style.transformOrigin = '0px 100% 0px';\r\n\r\n    // measurenents\r\n    let measurementsContainer = document.createElement('div');\r\n    // LPS\r\n    let lpsContainer = document.createElement('div');\r\n    lpsContainer.setAttribute('id', 'lpsPosition');\r\n    measurementsContainer.appendChild(lpsContainer);\r\n    // IJK\r\n    let ijkContainer = document.createElement('div');\r\n    ijkContainer.setAttribute('id', 'ijkPosition');\r\n    measurementsContainer.appendChild(ijkContainer);\r\n    // Value\r\n    let valueContainer = document.createElement('div');\r\n    valueContainer.setAttribute('id', 'value');\r\n    measurementsContainer.appendChild(valueContainer);\r\n\r\n    this.updateDOMColor();\r\n    this._dom.appendChild(measurementsContainer);\r\n\r\n    // add it!\r\n    this._container.appendChild(this._dom);\r\n  }\r\n\r\n  updateDOMContent() {\r\n    const rasContainer = this._dom.querySelector('#lpsPosition');\r\n    rasContainer.innerHTML = `LPS: \r\n      ${this._voxel.worldCoordinates.x.toFixed(2)} :\r\n      ${this._voxel.worldCoordinates.y.toFixed(2)} :\r\n      ${this._voxel.worldCoordinates.z.toFixed(2)}`;\r\n\r\n    const ijkContainer = this._dom.querySelector('#ijkPosition');\r\n    ijkContainer.innerHTML = `IJK: \r\n      ${this._voxel.dataCoordinates.x} :\r\n      ${this._voxel.dataCoordinates.y} :\r\n      ${this._voxel.dataCoordinates.z}`;\r\n\r\n    const valueContainer = this._dom.querySelector('#value');\r\n    valueContainer.innerHTML = `Value: ${this._voxel.value}`;\r\n  }\r\n\r\n  update() {\r\n    // general update\r\n    this.updateColor();\r\n    this._screenPosition =\r\n      this.worldToScreen(this._worldPosition, this._camera, this._container);\r\n\r\n    // set data coordinates && value\r\n    this.updateVoxel(this._worldPosition);\r\n\r\n    // update mesh position\r\n    this.updateMeshColor();\r\n    if (this._mesh && this._mesh.geometry) {\r\n      this._mesh.geometry.location = this._voxel.dataCoordinates;\r\n      this._mesh.updateMatrix();\r\n    }\r\n\r\n    // update dom\r\n    this.updateDOMContent();\r\n    this.updateDOMColor();\r\n    this.updateDOMPosition();\r\n  }\r\n\r\n\r\n  updateVoxel(worldCoordinates) {\r\n    // update world coordinates\r\n    this._voxel.worldCoordinates = worldCoordinates;\r\n\r\n    // update data coordinates\r\n    this._voxel.dataCoordinates = ModelsStack.worldToData(\r\n                  this._stack,\r\n                  this._voxel.worldCoordinates);\r\n\r\n    // update value\r\n    let value = ModelsStack.value(\r\n      this._stack,\r\n      this._voxel.dataCoordinates);\r\n\r\n    this._voxel.value = ModelsStack.valueRescaleSlopeIntercept(\r\n      value,\r\n      this._stack.rescaleSlope,\r\n      this._stack.rescaleIntercept);\r\n  }\r\n\r\n  updateDOMPosition() {\r\n    if (this._dom) {\r\n      let posY = this._screenPosition.y - this._container.offsetHeight;\r\n      this._dom.style.transform =\r\n        `translate3D(${this._screenPosition.x}px, ${posY}px, 0)`;\r\n    }\r\n  }\r\n\r\n  updateDOMColor() {\r\n    this._dom.style.borderColor = `${this._color}`;\r\n  }\r\n\r\n  free() {\r\n    this._container.\r\n      removeEventListener('mouseup', this.onMouseUpHandler, false);\r\n    this._container.\r\n      removeEventListener('mousemove', this.onMouseMoveHandler, false);\r\n\r\n    this._container.\r\n      removeEventListener('mousewheel', this.onMouseMoveHandler, false);\r\n    this._container.\r\n      removeEventListener('DOMMouseScroll', this.onMouseMoveHandler, false);\r\n\r\n    this._voxel.removeTest();\r\n    this.remove(this._voxel);\r\n    this._voxel = null;\r\n\r\n    super.free();\r\n  }\r\n\r\n  hoverVoxel(mouseScreenCoordinates, currentDataCoordinates) {\r\n    // update distance mouse/this._voxel\r\n    let dx =\r\n      mouseScreenCoordinates.screenX - this._voxel.voxel.screenCoordinates.x;\r\n    let dy =\r\n      mouseScreenCoordinates.screenY - this._voxel.voxel.screenCoordinates.y;\r\n    let distance = Math.sqrt(dx * dx + dy * dy);\r\n    this._voxel.distance = distance;\r\n    if (distance >= 0 && distance < 10) {\r\n      this._hover = true;\r\n    } else {\r\n      this._hover = false;\r\n    }\r\n  }\r\n\r\n  set worldPosition(worldPosition) {\r\n    this._worldPosition.copy(worldPosition);\r\n    this.update();\r\n  }\r\n\r\n  set defaultColor(defaultColor) {\r\n    this._defaultColor = defaultColor;\r\n    this.update();\r\n  }\r\n\r\n  get defaultColor() {\r\n    return this._defaultColor;\r\n  }\r\n\r\n  set activeColor(activeColor) {\r\n    this._activeColor = activeColor;\r\n    this.update();\r\n  }\r\n\r\n  get activeColor() {\r\n    return this._activeColor;\r\n  }\r\n\r\n  set hoverColor(hoverColor) {\r\n    this._hoverColor = hoverColor;\r\n    this.update();\r\n  }\r\n\r\n  get hoverColor() {\r\n    return this._hoverColor;\r\n  }\r\n\r\n  set selectedColor(selectedColor) {\r\n    this._selectedColor = selectedColor;\r\n    this.update();\r\n  }\r\n\r\n  get selectedColor() {\r\n    return this._selectedColor;\r\n  }\r\n\r\n  set showVoxel(showVoxel) {\r\n    this._showVoxel = showVoxel;\r\n    this.update();\r\n  }\r\n\r\n  get showVoxel() {\r\n    return this._showVoxel;\r\n  }\r\n\r\n  set showDomSVG(showDomSVG) {\r\n    this._showDomSVG = showDomSVG;\r\n    this.update();\r\n  }\r\n\r\n  get showDomSVG() {\r\n    return this._showDomSVG;\r\n  }\r\n\r\n  set showDomMeasurements(showDomMeasurements) {\r\n    this._showDomMeasurements = showDomMeasurements;\r\n    this.update();\r\n  }\r\n\r\n  get showDomMeasurements() {\r\n    return this._showDomMeasurements;\r\n  }\r\n\r\n  hideDOM() {\r\n    this._dom.style.display = 'none';\r\n  }\r\n\r\n  showDOM() {\r\n    this._dom.style.display = '';\r\n  }\r\n\r\n  hideMesh() {\r\n    this.visible = false;\r\n  }\r\n\r\n  showMesh() {\r\n    this.visible = true;\r\n  }\r\n\r\n  show() {\r\n    this.showDOM();\r\n    this.showMesh();\r\n  }\r\n\r\n  hide() {\r\n    this.hideDOM();\r\n    this.hideMesh();\r\n  }\r\n}\r\n"]}